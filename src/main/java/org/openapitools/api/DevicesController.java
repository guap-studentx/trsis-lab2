/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DeviceDTO;
import org.openapitools.model.DeviceDTOFull;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.openapitools.repository.DeviceEntity;
import org.openapitools.service.DeviceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-07T19:42:36.293257100+03:00[Europe/Moscow]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Devices", description = "the Devices API")
@Controller
@RequestMapping("${openapi.networkConfigurationApp.base-path:/api/v1}")
public class DevicesController {

    @Autowired
    private DeviceService deviceService;

    private Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /devices : Method for create new Device
     *
     * @param deviceDTO  (required)
     * @return Device created. (status code 200)
     *         or Validation Error. (status code 400)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "createDevice",
            summary = "Method for create new Device",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Device created.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTOFull.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Validation Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/devices",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    public ResponseEntity<?> createDevice(
            @Parameter(name = "DeviceDTO", description = "", required = true) @Valid @RequestBody DeviceDTO deviceDTO
    ) {
        DeviceDTOFull deviceDTOFull = deviceService.createDevice(deviceDTO);
        if (deviceDTOFull == null) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new String("\"Bad Request - Missing or Validation Error\""));
        }
        return new ResponseEntity<DeviceDTOFull>(deviceDTOFull, HttpStatus.OK);
    }


    /**
     * DELETE /devices/{device_id} : Method for deleting device by given device-ID
     *
     * @param deviceId Device ID (required)
     * @return Success - Device deleted. (status code 200)
     *         or Device not found. (status code 404)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "deleteById",
            summary = "Method for deleting device by given device-ID",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Success - Device deleted."),
                    @ApiResponse(responseCode = "404", description = "Device not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/devices/{device_id}",
            produces = { "application/json" }
    )

    public ResponseEntity<?> deleteById(
            @Parameter(name = "device_id", description = "Device ID", required = true, in = ParameterIn.PATH) @PathVariable("device_id") Integer deviceId
    ) {
        if (!deviceService.deleteById(deviceId)) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body(new String("\"Device not found\""));
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }


    /**
     * GET /devices : Method for getting list of all Devices
     *
     * @return List of devices. (status code 200)
     *         or Server error. (status code 500)
     */
    @Operation(
            operationId = "getAllDevices",
            summary = "Method for getting list of all Devices",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "List of devices.", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DeviceDTOFull.class)))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/devices",
            produces = { "application/json" }
    )

    public ResponseEntity<List<DeviceDTOFull>> getAllDevices(

    ) {
        return new ResponseEntity<>(deviceService.getAllDevices(), HttpStatus.OK);
    }


    /**
     * GET /devices/{device_id} : Method for getting device by given device-ID
     *
     * @param deviceId Device ID (required)
     * @return success. (status code 200)
     *         or Device not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
            operationId = "getDeviceById",
            summary = "Method for getting device by given device-ID",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "success.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTOFull.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Device not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/devices/{device_id}",
            produces = { "application/json" }
    )

    public ResponseEntity<?> getDeviceById(
            @Parameter(name = "device_id", description = "Device ID", required = true, in = ParameterIn.PATH) @PathVariable("device_id") Integer deviceId
    ) {
        DeviceDTOFull deviceDTOFull = deviceService.getDeviceById(deviceId);
        if (deviceDTOFull == null) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body(new String("\"Device not found\""));
        }
        return new ResponseEntity<DeviceDTOFull>(deviceDTOFull, HttpStatus.OK);
    }


    /**
     * PUT /devices/{device_id} : Method for updating device by given device-ID
     *
     * @param deviceId Device ID (required)
     * @param deviceDTO  (required)
     * @return Device succesfully updated. (status code 200)
     *         or Missing or Invalid data. (status code 400)
     *         or device not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
            operationId = "patchDevice",
            summary = "Method for updating device by given device-ID",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Device succesfully updated.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTOFull.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Missing or Invalid data.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "device not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/devices/{device_id}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    public ResponseEntity<?> putDevice(
            @Parameter(name = "device_id", description = "Device ID", required = true, in = ParameterIn.PATH) @PathVariable("device_id") Integer deviceId,
            @Parameter(name = "DeviceDTO", description = "", required = true) @Valid @RequestBody DeviceDTO deviceDTO
    ) {

        if (!deviceService.checkExistenceById(deviceId)) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body(new String("\"Device not found\""));
        }

        DeviceDTOFull deviceDTOFull = deviceService.putDevice(deviceId, deviceDTO);
        if (deviceDTOFull == null) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new String("\"Bad Request - Missing or invalid data\""));
        }
        return new ResponseEntity<DeviceDTOFull>(deviceDTOFull, HttpStatus.OK);
    }


    /**
     * PATCH /devices/{device_id} : Method for partial editing device by given device-ID
     *
     * @param deviceId Device ID (required)
     * @param deviceDTO  (required)
     * @return Device succesfully updated. (status code 200)
     *         or Missing or Invalid data. (status code 400)
     *         or device not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
            operationId = "patchDevice",
            summary = "Method for partial editing device by given device-ID",
            tags = { "Devices" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Device succesfully updated.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceDTOFull.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid data.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "device not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/devices/{device_id}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    public ResponseEntity<?> patchDevice(
            @Parameter(name = "device_id", description = "Device ID", required = true, in = ParameterIn.PATH) @PathVariable("device_id") Integer deviceId,
            @Parameter(name = "DeviceDTO", description = "", required = true) @Valid @RequestBody DeviceDTO deviceDTO
    ) {

        if (!deviceService.checkExistenceById(deviceId)) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body(new String("\"Device not found\""));
        }

        DeviceDTOFull deviceDTOFull = deviceService.patchDevice(deviceId, deviceDTO);
        if (deviceDTOFull == null) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new String("\"Bad Request - Invalid data\""));
        }
        return new ResponseEntity<DeviceDTOFull>(deviceDTOFull, HttpStatus.OK);
    }

}

